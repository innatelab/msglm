// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ProbabilityLessZeroSmoothed
double ProbabilityLessZeroSmoothed(const Rcpp::NumericVector& X, int nsteps, double bandwidth);
RcppExport SEXP _msglm_ProbabilityLessZeroSmoothed(SEXP XSEXP, SEXP nstepsSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbabilityLessZeroSmoothed(X, nsteps, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// ProbabilityLessSmoothed
double ProbabilityLessSmoothed(const Rcpp::NumericVector& X, const Rcpp::NumericVector& Y, int nsteps, double bandwidth);
RcppExport SEXP _msglm_ProbabilityLessSmoothed(SEXP XSEXP, SEXP YSEXP, SEXP nstepsSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbabilityLessSmoothed(X, Y, nsteps, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// DifferenceStatistics
Rcpp::List DifferenceStatistics(Rcpp::NumericMatrix& X, Rcpp::NumericMatrix& Y, const Rcpp::NumericVector& Deltas, int nsteps, double maxBandwidth, bool matchIterations);
RcppExport SEXP _msglm_DifferenceStatistics(SEXP XSEXP, SEXP YSEXP, SEXP DeltasSEXP, SEXP nstepsSEXP, SEXP maxBandwidthSEXP, SEXP matchIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Deltas(DeltasSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type maxBandwidth(maxBandwidthSEXP);
    Rcpp::traits::input_parameter< bool >::type matchIterations(matchIterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(DifferenceStatistics(X, Y, Deltas, nsteps, maxBandwidth, matchIterations));
    return rcpp_result_gen;
END_RCPP
}
// ContrastStatistics
Rcpp::List ContrastStatistics(const Rcpp::NumericMatrix& X, const Rcpp::IntegerVector& experiments2conditions_experiment, const Rcpp::IntegerVector& experiments2conditions_condition, const Rcpp::NumericMatrix& contrastXcondition, const Rcpp::NumericVector& contrast_offsets, int nsteps, double maxBandwidth, const Rcpp::NumericVector& quant_probs);
RcppExport SEXP _msglm_ContrastStatistics(SEXP XSEXP, SEXP experiments2conditions_experimentSEXP, SEXP experiments2conditions_conditionSEXP, SEXP contrastXconditionSEXP, SEXP contrast_offsetsSEXP, SEXP nstepsSEXP, SEXP maxBandwidthSEXP, SEXP quant_probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type experiments2conditions_experiment(experiments2conditions_experimentSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type experiments2conditions_condition(experiments2conditions_conditionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type contrastXcondition(contrastXconditionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type contrast_offsets(contrast_offsetsSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type maxBandwidth(maxBandwidthSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type quant_probs(quant_probsSEXP);
    rcpp_result_gen = Rcpp::wrap(ContrastStatistics(X, experiments2conditions_experiment, experiments2conditions_condition, contrastXcondition, contrast_offsets, nsteps, maxBandwidth, quant_probs));
    return rcpp_result_gen;
END_RCPP
}
// CloudsOverlap
Rcpp::DataFrame CloudsOverlap(const Rcpp::NumericMatrix& X, const Rcpp::NumericMatrix& Y, double maxBandwidth, int nsteps, const Rcpp::NumericVector& quant_probs);
RcppExport SEXP _msglm_CloudsOverlap(SEXP XSEXP, SEXP YSEXP, SEXP maxBandwidthSEXP, SEXP nstepsSEXP, SEXP quant_probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type maxBandwidth(maxBandwidthSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type quant_probs(quant_probsSEXP);
    rcpp_result_gen = Rcpp::wrap(CloudsOverlap(X, Y, maxBandwidth, nsteps, quant_probs));
    return rcpp_result_gen;
END_RCPP
}
// GammaMethodPValuesCombine
double GammaMethodPValuesCombine(std::vector<double> pvalues, double stt);
RcppExport SEXP _msglm_GammaMethodPValuesCombine(SEXP pvaluesSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pvalues(pvaluesSEXP);
    Rcpp::traits::input_parameter< double >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(GammaMethodPValuesCombine(pvalues, stt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_msglm_ProbabilityLessZeroSmoothed", (DL_FUNC) &_msglm_ProbabilityLessZeroSmoothed, 3},
    {"_msglm_ProbabilityLessSmoothed", (DL_FUNC) &_msglm_ProbabilityLessSmoothed, 4},
    {"_msglm_DifferenceStatistics", (DL_FUNC) &_msglm_DifferenceStatistics, 6},
    {"_msglm_ContrastStatistics", (DL_FUNC) &_msglm_ContrastStatistics, 8},
    {"_msglm_CloudsOverlap", (DL_FUNC) &_msglm_CloudsOverlap, 5},
    {"_msglm_GammaMethodPValuesCombine", (DL_FUNC) &_msglm_GammaMethodPValuesCombine, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_msglm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
